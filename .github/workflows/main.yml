name: CI/CD Pipeline DevOps

on:
  push:
    branches: [ "main" ]

jobs:
  test_and_analyze:
    runs-on: self-hosted 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm test

      - name: SonarQube Scan
        shell: powershell
        run: |
          docker run --rm -e SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}" `
            -e SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}" `
            -v "${{ github.workspace }}:/usr/src" `
            sonarsource/sonar-scanner-cli

  build_and_push:
    needs: test_and_analyze
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/login-app:${{ github.sha }}

  deploy:
    needs: build_and_push
    runs-on: self-hosted
    steps:
      - name: Deploy to Minikube
        shell: powershell
        run: |
          Write-Host "üöÄ Deploying to Minikube..."
          kubectl set image deployment/login-app-deployment web-app=${{ secrets.DOCKERHUB_USERNAME }}/login-app:${{ github.sha }}

      - name: Verify Deployment Rollout
        shell: powershell
        run: |
          Write-Host "üîç Verifying deployment rollout status..."
          kubectl rollout status deployment/login-app-deployment --timeout=60s
          if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå Deployment failed. Check logs."
            exit 1
          }

      - name: Health Check - /metrics
        shell: powershell
        run: |
          Write-Host "üìà Checking /metrics endpoint..."
          Start-Sleep -Seconds 10
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000/metrics" -UseBasicParsing -TimeoutSec 10
            if ($response.StatusCode -ne 200) {
              Write-Error "‚ùå Metrics endpoint not reachable (StatusCode: $($response.StatusCode))"
              exit 1
            }
          } catch {
            Write-Error "‚ùå Metrics endpoint not reachable. $_"
            exit 1
          }
