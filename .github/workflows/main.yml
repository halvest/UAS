name: CI/CD Pipeline DevOps

on:
  push:
    branches: [ "TND-123-development" ]

jobs:
  test_and_analyze:
    runs-on: self-hosted 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm test

      - name: SonarQube Scan
        run: docker run --rm --network=host -e SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}" -e SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}" -v "${{ github.workspace }}:/usr/src" sonarsource/sonar-scanner-cli
        shell: powershell

  build_and_push:
    needs: test_and_analyze
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/login-app:${{ github.sha }}

  deploy:
    needs: build_and_push
    runs-on: self-hosted
    steps:
      - name: Deploy to Minikube
        shell: powershell
        run: |
          Write-Host "Deploying to Minikube..."
          kubectl set image deployment/login-app-deployment web-app=${{ secrets.DOCKERHUB_USERNAME }}/login-app:${{ github.sha }}

      - name: Verify Deployment Rollout
        shell: powershell
        run: |
          Write-Host "Verifying deployment rollout status..."
          $status = kubectl rollout status deployment/login-app-deployment --timeout=60s
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Deployment failed. Check logs."
            exit 1
          }
      - name: Jira Deployment Notification
        uses: atlassian/gajira-deployment@v3
        with:
          host: ${{ secrets.JIRA_HOST }}
          email: ${{ secrets.JIRA_EMAIL }}
          token: ${{ secrets.JIRA_TOKEN }}
          project: 'TND'
          environment: 'production'